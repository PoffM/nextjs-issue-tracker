// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum IssueStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Issue {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  title       String
  description String?
  status      IssueStatus  @default(NEW)
  IssueEvent  IssueEvent[]
}

model IssueEvent {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  comment   String?
  status    IssueStatus?

  issueId Int
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

// next-auth Account
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// next-auth Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// next-auth User
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// next-auth VerificationToken
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
